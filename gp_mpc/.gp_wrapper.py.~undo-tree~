(undo-tree-save-format-version . 1)
"89cb7905d05a073986982da2775338e7fa16198b"
[nil nil nil nil (25261 47124 779794 184000) 0 nil]
([nil nil ((#("1" 0 1 (fontified t face highlight-numbers-number)) . -13303) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 13304 (t 25261 45734 741124 767000)) nil (25261 47124 779790 748000) 0 nil])
([nil nil ((13303 . 13304)) nil (25261 47124 779780 238000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face highlight-numbers-number)) . -13303) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 13304) nil (25261 47124 779775 942000) 0 nil])
([nil nil ((13303 . 13304)) nil (25261 47124 779745 899000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8581) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 8582 (t 25261 47124 785749 765000)) nil (25261 47617 550984 191000) 0 nil])
([nil nil ((8581 . 8590)) nil (25261 47617 550778 379000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . 8582) (undo-tree-id44 . -8) (undo-tree-id45 . -8) (undo-tree-id46 . -8) (undo-tree-id47 . -8) (undo-tree-id48 . -8) (undo-tree-id49 . -8) (undo-tree-id50 . -8) (undo-tree-id51 . -8) (undo-tree-id52 . -8) (t 25261 47617 563240 999000)) nil (25261 47625 439419 981000) 0 nil])
([nil nil ((#("        # @ Christian this initializes the hyperparameters, handles the dimensions, and sets bounds for the GP" 0 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 110 (fontified t face font-lock-comment-face)) . 882) (undo-tree-id59 . -110) (t 25261 47625 443298 999000)) nil (25261 48181 919818 292000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -881) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 882) nil (25261 48181 919806 178000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2135) (undo-tree-id204 . -1) (2134 . 2135) (2133 . 2135) (#("(" 0 1 (fontified nil)) . -2133) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (2125 . 2134) (t 25261 48181 927840 999000)) nil (25261 48245 890554 126000) 0 nil])
([nil nil ((#("squeeze()" 0 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t face (rainbow-delimiters-depth-1-face))) . -2126) (undo-tree-id131 . -9) (undo-tree-id132 . -1) (undo-tree-id133 . -2) (undo-tree-id134 . -1) (undo-tree-id135 . -3) (undo-tree-id136 . -2) (undo-tree-id137 . -4) (undo-tree-id138 . -3) (undo-tree-id139 . -5) (undo-tree-id140 . -4) (undo-tree-id141 . -6) (undo-tree-id142 . -5) (undo-tree-id143 . -7) (undo-tree-id144 . -6) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -7) (undo-tree-id153 . -9) (undo-tree-id154 . -9) (undo-tree-id155 . -8) (undo-tree-id156 . -9) (undo-tree-id157 . -8) (undo-tree-id158 . -9) (undo-tree-id159 . -8) (undo-tree-id160 . -9) (undo-tree-id161 . -8) (undo-tree-id162 . -9) (undo-tree-id163 . -8) (undo-tree-id164 . -9) (undo-tree-id165 . -8) (undo-tree-id166 . -9) (undo-tree-id167 . -7) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -9) (undo-tree-id171 . -8) (undo-tree-id172 . -9) (undo-tree-id173 . -8) (undo-tree-id174 . -9) (undo-tree-id175 . -8) (undo-tree-id176 . -9) (undo-tree-id177 . -8) (undo-tree-id178 . -9) (undo-tree-id179 . -8) (undo-tree-id180 . -9) (undo-tree-id181 . -7) (undo-tree-id182 . -8) (undo-tree-id183 . -8) (undo-tree-id184 . -9) (undo-tree-id185 . -8) (undo-tree-id186 . -9) (undo-tree-id187 . -8) (undo-tree-id188 . -9) (undo-tree-id189 . -8) (undo-tree-id190 . -9) (undo-tree-id191 . -8) (undo-tree-id192 . -9) (undo-tree-id193 . -8) (undo-tree-id194 . -9) (undo-tree-id195 . -7) (undo-tree-id196 . -8) (undo-tree-id197 . 2) (undo-tree-id198 . -8) (undo-tree-id199 . 1) (undo-tree-id200 . -8) (undo-tree-id201 . 1) (undo-tree-id202 . -9) (undo-tree-id203 . -9) 2135) nil (25261 48245 890528 186000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2125) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 2126) nil (25261 48245 888028 819000) 0 nil])
([nil nil ((2111 . 2112)) nil (25261 48245 886945 455000) 0 nil])
([nil nil ((2413 . 2414)) nil (25261 48245 886942 615000) 0 nil])
([nil nil ((2631 . 2632)) nil (25261 48245 886936 87000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -2111) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 2112 (t 25261 48245 895808 999000)) nil (25261 48288 191663 955000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -2412) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 2413) nil (25261 48288 191645 757000) 0 nil])
([nil nil ((9161 . 9162) (t 25261 48288 196949 0)) nil (25261 48350 774876 934000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -9161) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 9162) nil (25261 48350 774869 222000) 0 nil])
([nil nil ((2412 . 2413) (t 25261 48350 784226 999000)) nil (25261 48441 98813 525000) 0 nil])
([nil nil ((2646 . 2659) (t 25261 48441 109366 999000)) nil (25261 48694 878304 941000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 2647) (undo-tree-id327 . -12) (undo-tree-id328 . -12) (undo-tree-id329 . -12) (undo-tree-id330 . -12) (undo-tree-id331 . -12) (undo-tree-id332 . -12) (undo-tree-id333 . -12) (undo-tree-id334 . -12) 2659) nil (25261 48694 878300 3000) 0 nil])
([nil nil ((2646 . 2659)) nil (25261 48694 878276 762000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2655) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) 2659) nil (25261 48694 878268 813000) 0 nil])
([nil nil ((2661 . 2664) (2660 . 2662) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -2660) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (2655 . 2661)) nil (25261 48694 876207 594000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2663) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 2664) nil (25261 48694 876198 319000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2662) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 2663) nil (25261 48694 875824 415000) 0 nil])
([nil nil ((2666 . 2674) (2665 . 2667) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face) syntax-table (15))) . -2665) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (2665 . 2666) (2664 . 2666) (#("[" 0 1 (fontified nil)) . -2664) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (2662 . 2665)) nil (25261 48694 875804 752000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-string-face)) . -2671) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -2672) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2673) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 2674) nil (25261 48694 875778 721000) 0 nil])
([nil nil ((2671 . 2680)) nil (25261 48694 875490 772000) 0 nil])
([nil nil ((2683 . 2692)) nil (25261 48694 875488 459000) 0 nil])
([nil nil ((2698 . 2701) (2697 . 2699) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -2697) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (2692 . 2698)) nil (25261 48694 875484 729000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2699) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("_" 0 1 (fontified t)) . -2700) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 2701) nil (25261 48694 875474 114000) 0 nil])
([nil nil ((2701 . 2703) (#("[" 0 1 (fontified nil)) . -2701) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (2699 . 2702)) nil (25261 48694 875444 414000) 0 nil])
([nil nil ((2703 . 2707) (nil fontified nil 2703 . 2704) (2702 . 2704) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face) syntax-table (15))) . -2702) (undo-tree-id218 . 1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (2702 . 2703)) nil (25261 48694 875432 779000) 0 nil])
([nil nil ((2683 . 2692) (t 25261 48694 887300 219000)) nil (25261 48726 252222 328000) 0 nil])
([nil nil ((2698 . 2700) (2697 . 2699) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -2697) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (2692 . 2698)) nil (25261 48726 252212 66000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2699) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) 2700) nil (25261 48726 252190 456000) 0 nil])
([nil nil ((2700 . 2701) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2700) (undo-tree-id357 . -1) (undo-tree-id358 . 1) (undo-tree-id359 . -1) (2699 . 2700)) nil (25261 48726 252166 177000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2699) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("p" 0 1 (fontified t)) . -2700) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) 2701) nil (25261 48726 252128 196000) 0 nil])
([nil nil ((2702 . 2703) (2701 . 2703) (#("[" 0 1 (fontified nil)) . -2701) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (2699 . 2702)) nil (25261 48726 252056 241000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2702) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . 1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 2703) nil (25261 48726 252033 129000) 0 nil])
([nil nil ((2703 . 2713) (nil fontified nil 2703 . 2704) (2702 . 2704) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face) syntax-table (15))) . -2702) (undo-tree-id335 . 1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (2702 . 2703)) nil (25261 48726 251995 157000) 0 nil])
([nil nil ((2715 . 2716) (t 25261 48726 271601 357000)) nil (25261 48736 420367 365000) 0 nil])
([nil nil ((#("init" 0 4 (fontified t face font-lock-string-face)) . -2709) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) 2713 (t 25261 48736 430519 725000)) nil (25261 48756 889096 382000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face font-lock-string-face)) . -2703) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . 1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2704) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -2705) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -2706) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2707) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -2708) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 2709) nil (25261 48756 888871 311000) 0 nil])
([nil nil ((2703 . 2709)) nil (25261 48756 885127 44000) 0 nil])
([nil nil ((#("
        print(g_p['hinge_position'])
        print(g_p['linear'])
        print(g_p['mean'])
" 0 1 (fontified t) 1 9 (fontified t) 9 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t syntax-table (15) face font-lock-string-face) 20 34 (fontified t face font-lock-string-face) 34 35 (fontified t syntax-table (15) face font-lock-string-face) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face (rainbow-delimiters-depth-1-face)) 37 38 (fontified t) 38 46 (fontified t) 46 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t face (rainbow-delimiters-depth-1-face)) 52 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 57 (fontified t syntax-table (15) face font-lock-string-face) 57 63 (fontified t face font-lock-string-face) 63 64 (fontified t syntax-table (15) face font-lock-string-face) 64 65 (fontified t face (rainbow-delimiters-depth-2-face)) 65 66 (fontified t face (rainbow-delimiters-depth-1-face)) 66 67 (fontified t) 67 75 (fontified t) 75 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t face (rainbow-delimiters-depth-1-face)) 81 84 (fontified t) 84 85 (fontified t face (rainbow-delimiters-depth-2-face)) 85 86 (syntax-table (15) fontified t face font-lock-string-face) 86 90 (fontified t face font-lock-string-face) 90 91 (syntax-table (15) fontified t face font-lock-string-face) 91 92 (fontified t face (rainbow-delimiters-depth-2-face)) 92 93 (fontified t face (rainbow-delimiters-depth-1-face)) 93 94 (fontified t)) . -2646) (undo-tree-id576 . -94) (undo-tree-id577 . -94) (undo-tree-id578 . -57) (undo-tree-id579 . -57) (undo-tree-id580 . -57) (undo-tree-id581 . -57) (undo-tree-id582 . -57) (undo-tree-id583 . -57) (undo-tree-id584 . -57) (undo-tree-id585 . -57) (undo-tree-id586 . -57) (undo-tree-id587 . -57) (undo-tree-id588 . -57) (undo-tree-id589 . -57) (undo-tree-id590 . -57) (undo-tree-id591 . -57) (undo-tree-id592 . -57) (undo-tree-id593 . -57) (undo-tree-id594 . -57) (undo-tree-id595 . -57) (undo-tree-id596 . -57) (undo-tree-id597 . -57) (undo-tree-id598 . -57) (undo-tree-id599 . -57) (undo-tree-id600 . -57) (undo-tree-id601 . -57) (undo-tree-id602 . -57) (undo-tree-id603 . -57) (undo-tree-id604 . -57) (undo-tree-id605 . -57) (undo-tree-id606 . -57) (undo-tree-id607 . -57) (undo-tree-id608 . -57) (undo-tree-id609 . -57) (undo-tree-id610 . -57) (undo-tree-id611 . -57) (undo-tree-id612 . -57) (undo-tree-id613 . -57) (undo-tree-id614 . -57) (undo-tree-id615 . -57) (undo-tree-id616 . -57) (undo-tree-id617 . -63) (undo-tree-id618 . -62) (undo-tree-id619 . -63) (undo-tree-id620 . -63) (undo-tree-id621 . -63) (undo-tree-id622 . -64) (undo-tree-id623 . -63) (undo-tree-id624 . -64) (undo-tree-id625 . -63) (undo-tree-id626 . -64) (undo-tree-id627 . -56) (undo-tree-id628 . -57) (undo-tree-id629 . -63) (undo-tree-id630 . -64) (undo-tree-id631 . -63) (undo-tree-id632 . -64) (undo-tree-id633 . -56) (undo-tree-id634 . -57) (undo-tree-id635 . -56) (undo-tree-id636 . -57) (undo-tree-id637 . -63) (undo-tree-id638 . -64) (undo-tree-id639 . -75) (undo-tree-id640 . -75) (undo-tree-id641 . -63) (undo-tree-id642 . -64) (undo-tree-id643 . -63) (undo-tree-id644 . -64) (undo-tree-id645 . -63) (undo-tree-id646 . -64) (undo-tree-id647 . -56) (undo-tree-id648 . -57) (undo-tree-id649 . -63) (undo-tree-id650 . -64) (undo-tree-id651 . -63) (undo-tree-id652 . -64) (undo-tree-id653 . -56) (undo-tree-id654 . -57) (undo-tree-id655 . -56) (undo-tree-id656 . -57) (undo-tree-id657 . -63) (undo-tree-id658 . -64) (undo-tree-id659 . -63) (undo-tree-id660 . -64) (undo-tree-id661 . -63) (undo-tree-id662 . -64) (undo-tree-id663 . -63) (undo-tree-id664 . -64) (undo-tree-id665 . -56) (undo-tree-id666 . -57) (undo-tree-id667 . -63) (undo-tree-id668 . -64) (undo-tree-id669 . -63) (undo-tree-id670 . -64) (undo-tree-id671 . -56) (undo-tree-id672 . -57) (undo-tree-id673 . -56) (undo-tree-id674 . -57) (undo-tree-id675 . -63) (undo-tree-id676 . -64) (undo-tree-id677 . -26) (undo-tree-id678 . -63) (undo-tree-id679 . -26) (undo-tree-id680 . -94) (undo-tree-id681 . -94) (undo-tree-id682 . -94) 2740 (t 25261 48756 900280 467000)) nil (25261 48775 329493 489000) 0 nil])
([nil nil ((2940 . 2941) (t 25261 48775 335059 136000)) nil (25261 48795 586370 305000) 0 nil])
([nil nil ((3023 . 3024)) nil (25261 48795 586365 452000) 0 nil])
([nil nil ((3112 . 3113)) nil (25261 48795 586272 474000) 0 nil])
([nil nil ((2111 . 2112) (t 25261 48795 596923 870000)) nil (25261 48803 640669 559000) 0 nil])
([nil nil ((#("
        #if 'mean' in g_p: g_p['mean'] *= np.ones((self.state_dim,1))             # Edit  @ Christian: Numpy not happy - > casting issues
        #if 'linear' in g_p: g_p['linear'] *= np.ones((self.state_dim,1))
        #if 'hinge' in g_p: g_p['hinge'] *= np.ones((self.state_dim,1))

        #if 'mean' in g_p: g_p['mean'] = g_p['mean'] * np.ones((self.state_dim,1))
        #if 'linear' in g_p: g_p['linear'] = g_p['linear'] * np.ones((self.state_dim,1))
        #if 'hinge' in g_p: g_p['hinge'] = g_p['hinge'] * np.ones((self.state_dim,1))
" 0 1 (fontified t) 1 9 (fontified t) 9 10 (fontified t face font-lock-comment-delimiter-face) 10 13 (fontified t face font-lock-comment-face) 13 14 (syntax-table (15) fontified t face font-lock-comment-face) 14 18 (fontified t face font-lock-comment-face) 18 19 (syntax-table (15) fontified t face font-lock-comment-face) 19 32 (fontified t face font-lock-comment-face) 32 33 (syntax-table (15) fontified t face font-lock-comment-face) 33 37 (fontified t face font-lock-comment-face) 37 38 (syntax-table (15) fontified t face font-lock-comment-face) 38 139 (fontified t face font-lock-comment-face) 139 147 (fontified t) 147 148 (fontified t face font-lock-comment-delimiter-face) 148 151 (fontified t face font-lock-comment-face) 151 152 (syntax-table (15) fontified t face font-lock-comment-face) 152 158 (fontified t face font-lock-comment-face) 158 159 (syntax-table (15) fontified t face font-lock-comment-face) 159 172 (fontified t face font-lock-comment-face) 172 173 (syntax-table (15) fontified t face font-lock-comment-face) 173 179 (fontified t face font-lock-comment-face) 179 180 (syntax-table (15) fontified t face font-lock-comment-face) 180 213 (fontified t face font-lock-comment-face) 213 221 (fontified t) 221 222 (fontified t face font-lock-comment-delimiter-face) 222 225 (fontified t face font-lock-comment-face) 225 226 (syntax-table (15) fontified t face font-lock-comment-face) 226 231 (fontified t face font-lock-comment-face) 231 232 (syntax-table (15) fontified t face font-lock-comment-face) 232 238 (fontified t face font-lock-comment-face) 238 245 (fontified t face font-lock-comment-face) 245 246 (syntax-table (15) fontified t face font-lock-comment-face) 246 251 (fontified t face font-lock-comment-face) 251 252 (syntax-table (15) fontified t face font-lock-comment-face) 252 282 (fontified t face font-lock-comment-face) 282 285 (fontified t face font-lock-comment-face) 285 286 (fontified t) 286 294 (fontified t) 294 295 (fontified t face font-lock-comment-delimiter-face) 295 297 (fontified t face font-lock-comment-face) 297 298 (fontified t face font-lock-comment-face) 298 299 (syntax-table (15) fontified t face font-lock-comment-face) 299 303 (fontified t face font-lock-comment-face) 303 304 (syntax-table (15) fontified t face font-lock-comment-face) 304 305 (fontified t face font-lock-comment-face) 305 307 (fontified t face font-lock-comment-face) 307 313 (fontified t face font-lock-comment-face) 313 316 (fontified t face font-lock-comment-face) 316 317 (fontified t face font-lock-comment-face) 317 318 (syntax-table (15) fontified t face font-lock-comment-face) 318 322 (fontified t face font-lock-comment-face) 322 323 (syntax-table (15) fontified t face font-lock-comment-face) 323 324 (fontified t face font-lock-comment-face) 324 330 (fontified t face font-lock-comment-face) 330 331 (fontified t face font-lock-comment-face) 331 332 (syntax-table (15) fontified t face font-lock-comment-face) 332 336 (fontified t face font-lock-comment-face) 336 337 (syntax-table (15) fontified t face font-lock-comment-face) 337 338 (fontified t face font-lock-comment-face) 338 348 (fontified t face font-lock-comment-face) 348 349 (fontified t face font-lock-comment-face) 349 350 (fontified t face font-lock-comment-face) 350 354 (fontified t face font-lock-comment-face) 354 365 (fontified t face font-lock-comment-face) 365 366 (fontified t face font-lock-comment-face) 366 367 (fontified t face font-lock-comment-face) 367 368 (fontified t face font-lock-comment-face) 368 369 (fontified t face font-lock-comment-face) 369 377 (fontified t) 377 378 (fontified t face font-lock-comment-delimiter-face) 378 380 (fontified t face font-lock-comment-face) 380 381 (fontified t face font-lock-comment-face) 381 382 (syntax-table (15) fontified t face font-lock-comment-face) 382 388 (fontified t face font-lock-comment-face) 388 389 (syntax-table (15) fontified t face font-lock-comment-face) 389 390 (fontified t face font-lock-comment-face) 390 392 (fontified t face font-lock-comment-face) 392 398 (fontified t face font-lock-comment-face) 398 401 (fontified t face font-lock-comment-face) 401 402 (fontified t face font-lock-comment-face) 402 403 (syntax-table (15) fontified t face font-lock-comment-face) 403 409 (fontified t face font-lock-comment-face) 409 410 (syntax-table (15) fontified t face font-lock-comment-face) 410 411 (fontified t face font-lock-comment-face) 411 417 (fontified t face font-lock-comment-face) 417 418 (fontified t face font-lock-comment-face) 418 419 (syntax-table (15) fontified t face font-lock-comment-face) 419 425 (fontified t face font-lock-comment-face) 425 426 (syntax-table (15) fontified t face font-lock-comment-face) 426 427 (fontified t face font-lock-comment-face) 427 437 (fontified t face font-lock-comment-face) 437 438 (fontified t face font-lock-comment-face) 438 439 (fontified t face font-lock-comment-face) 439 443 (fontified t face font-lock-comment-face) 443 454 (fontified t face font-lock-comment-face) 454 455 (fontified t face font-lock-comment-face) 455 456 (fontified t face font-lock-comment-face) 456 457 (fontified t face font-lock-comment-face) 457 458 (fontified t face font-lock-comment-face) 458 466 (fontified t) 466 467 (fontified t face font-lock-comment-delimiter-face) 467 469 (fontified t face font-lock-comment-face) 469 470 (fontified t face font-lock-comment-face) 470 471 (syntax-table (15) fontified t face font-lock-comment-face) 471 476 (fontified t face font-lock-comment-face) 476 477 (syntax-table (15) fontified t face font-lock-comment-face) 477 478 (fontified t face font-lock-comment-face) 478 480 (fontified t face font-lock-comment-face) 480 483 (fontified t face font-lock-comment-face) 483 485 (fontified t face font-lock-comment-face) 485 486 (fontified t face font-lock-comment-face) 486 489 (fontified t face font-lock-comment-face) 489 490 (fontified t face font-lock-comment-face) 490 491 (syntax-table (15) fontified t face font-lock-comment-face) 491 496 (fontified t face font-lock-comment-face) 496 497 (syntax-table (15) fontified t face font-lock-comment-face) 497 498 (fontified t face font-lock-comment-face) 498 503 (fontified t face font-lock-comment-face) 503 504 (fontified t face font-lock-comment-face) 504 505 (fontified t face font-lock-comment-face) 505 506 (syntax-table (15) fontified t face font-lock-comment-face) 506 511 (fontified t face font-lock-comment-face) 511 512 (syntax-table (15) fontified t face font-lock-comment-face) 512 513 (fontified t face font-lock-comment-face) 513 523 (fontified t face font-lock-comment-face) 523 524 (fontified t face font-lock-comment-face) 524 525 (fontified t face font-lock-comment-face) 525 529 (fontified t face font-lock-comment-face) 529 540 (fontified t face font-lock-comment-face) 540 541 (fontified t face font-lock-comment-face) 541 542 (fontified t face font-lock-comment-face) 542 543 (fontified t face font-lock-comment-face) 543 544 (fontified t face font-lock-comment-face)) . -2647) (undo-tree-id683 . -544) (undo-tree-id684 . -544) (undo-tree-id685 . -60) (undo-tree-id686 . -138) (undo-tree-id687 . -60) (undo-tree-id688 . -198) (undo-tree-id689 . -60) (undo-tree-id690 . -272) (undo-tree-id691 . -60) (undo-tree-id692 . -285) (undo-tree-id693 . -272) (undo-tree-id694 . -345) (undo-tree-id695 . -272) (undo-tree-id696 . -285) (undo-tree-id697 . -345) (undo-tree-id698 . -272) (undo-tree-id699 . -285) (undo-tree-id700 . -198) (undo-tree-id701 . -272) (undo-tree-id702 . -138) (undo-tree-id703 . -198) (undo-tree-id704 . -60) (undo-tree-id705 . -138) (undo-tree-id706 . -60) (undo-tree-id707 . -544) (undo-tree-id708 . -285) (undo-tree-id709 . -544) (undo-tree-id710 . -285) (undo-tree-id711 . -544) 3191 (t 25261 48803 644898 162000)) nil (25261 48926 608221 395000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face highlight-numbers-number)) . -12654) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) 12655 (t 25261 48926 626004 999000)) nil (25261 49093 987117 722000) 0 nil])
([nil nil ((12654 . 12655)) nil (25261 49093 987079 747000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face highlight-numbers-number)) . -12654) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) 12655 (t 25261 49094 29664 999000)) nil (25261 49333 965956 883000) 0 nil])
([nil nil ((12654 . 12655)) nil (25261 49333 965944 305000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face highlight-numbers-number)) . -12654) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) 12655) nil (25261 49333 965940 233000) 0 nil])
([nil nil ((12654 . 12655)) nil (25261 49333 965919 725000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face highlight-numbers-number)) . -12654) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) 12655 (t 25261 49333 973576 999000)) nil (25261 50070 66651 500000) 0 nil])
([nil current ((12654 . 12655)) nil (25261 50070 66621 785000) 0 nil])
nil
